ca65 V2.19 - Git ce3bcad
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git ce3bcad
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git ce3bcad"
000000r 1               	.setcpu		"65816"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_dma_transferb
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A2 00        	ldx     #$00
000002r 1  A9 00        	lda     #$00
000004r 1  20 rr rr     	jsr     pushax
000007r 1  4C rr rr     	jmp     L0004
00000Ar 1  A0 01        L0002:	ldy     #$01
00000Cr 1  20 rr rr     	jsr     ldaxysp
00000Fr 1  20 rr rr     	jsr     pushax
000012r 1  A2 02        	ldx     #$02
000014r 1  A9 80        	lda     #$80
000016r 1  20 rr rr     	jsr     tosumulax
000019r 1  20 rr rr     	jsr     pushax
00001Cr 1  A0 03        	ldy     #$03
00001Er 1  20 rr rr     	jsr     ldaxysp
000021r 1  AA           	tax
000022r 1  A9 00        	lda     #$00
000024r 1  20 rr rr     	jsr     shlax3
000027r 1  20 rr rr     	jsr     pushax
00002Ar 1  A2 00        	ldx     #$00
00002Cr 1  A9 01        	lda     #$01
00002Er 1  20 rr rr     	jsr     pushax
000031r 1  A0 05        	ldy     #$05
000033r 1  20 rr rr     	jsr     ldaxysp
000036r 1  20 rr rr     	jsr     pushax
000039r 1  A2 00        	ldx     #$00
00003Br 1  A9 0A        	lda     #$0A
00003Dr 1  20 rr rr     	jsr     pushax
000040r 1  A0 07        	ldy     #$07
000042r 1  20 rr rr     	jsr     ldaxysp
000045r 1  20 rr rr     	jsr     pushax
000048r 1  A2 02        	ldx     #$02
00004Ar 1  A9 00        	lda     #$00
00004Cr 1  85 rr        	sta     sreg
00004Er 1  A9 00        	lda     #$00
000050r 1  85 rr        	sta     sreg+1
000052r 1  A9 80        	lda     #$80
000054r 1  20 rr rr     	jsr     pusheax
000057r 1  A2 00        	ldx     #$00
000059r 1  A9 01        	lda     #$01
00005Br 1  20 rr rr     	jsr     _dma_transferb
00005Er 1  A0 04        	ldy     #$04
000060r 1  A2 00        	ldx     #$00
000062r 1  A9 01        	lda     #$01
000064r 1  20 rr rr     	jsr     addeqysp
000067r 1  20 rr rr     	jsr     incsp4
00006Ar 1  4C rr rr     L0004:	jmp     L0002
00006Dr 1  4C rr rr     	jmp     L0001
000070r 1  20 rr rr     L0001:	jsr     incsp2
000073r 1  60           	rts
000074r 1               
000074r 1               .endproc
000074r 1               
000074r 1               
